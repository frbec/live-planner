import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, g as globals, c as create_slot, v as validate_slots, a as createEventDispatcher, u as update_slot, t as transition_in, b as transition_out, e as space, f as element, h as text, j as create_component, q as query_selector_all, k as detach_dev, l as claim_space, m as claim_element, n as children, o as claim_text, p as claim_component, r as attr_dev, w as add_location, x as insert_dev, y as append_dev, z as mount_component, A as destroy_component, B as listen_dev, C as is_function } from './client.24e2179d.js';

var successkid = "/client/465898c830bb9d2c.jpg";

/* node_modules/svelte-facebook-login/src/lib/FacebookLogin.svelte generated by Svelte v3.29.7 */

const { Error: Error_1 } = globals;
const get_default_slot_changes = dirty => ({});
const get_default_slot_context = ctx => ({ onLogin: /*onLogin*/ ctx[0] });

function create_fragment(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], get_default_slot_context);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 64) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, get_default_slot_changes, get_default_slot_context);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const urlFacebook = "https://www.facebook.com/v5.0/dialog/oauth";

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("FacebookLogin", slots, ['default']);
	let { clientId } = $$props;
	let { state } = $$props;
	let { redirectUri } = $$props;
	let { responseType } = $$props;
	let { scope } = $$props;
	const dispatch = createEventDispatcher();
	let interval = 0;
	let popupWindow;

	const convertQueryParams = url => {
		const query = url.substr(1);
		const result = {};

		query.split("&").forEach(param => {
			const item = param.split("=");
			result[item[0]] = decodeURIComponent(item[1]);
		});

		return result;
	};

	const close = () => {
		if (interval) {
			window.clearInterval(interval);
			interval = null;
		}

		popupWindow.close();
	};

	// SvelteGithubLogin based
	const poll = () => {
		interval = window.setInterval(
			() => {
				try {
					if (!popupWindow || popupWindow.closed !== false) {
						close();
						dispatch("error", new Error("The popup was closed"));
						return;
					}

					if (popupWindow.location.href === urlFacebook || popupWindow.location.pathname === "blank") {
						return;
					}

					dispatch("success", convertQueryParams(popupWindow.location.search));
					close();
				} catch(error) {
					
				} // error
			},
			500
		);
	};

	const onLogin = () => {
		let urlParams = `client_id=${clientId}&state=${state}&redirect_uri=${redirectUri}`;

		if (responseType) {
			urlParams += `response_type=${responseType}`;
		}

		if (scope) {
			urlParams += `scope=${scope}`;
		}

		popupWindow = window.open(`${urlFacebook}?${urlParams}`, "facebook-oauth", "");
		dispatch("request");
		poll();
	};

	const writable_props = ["clientId", "state", "redirectUri", "responseType", "scope"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<FacebookLogin> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("clientId" in $$props) $$invalidate(1, clientId = $$props.clientId);
		if ("state" in $$props) $$invalidate(2, state = $$props.state);
		if ("redirectUri" in $$props) $$invalidate(3, redirectUri = $$props.redirectUri);
		if ("responseType" in $$props) $$invalidate(4, responseType = $$props.responseType);
		if ("scope" in $$props) $$invalidate(5, scope = $$props.scope);
		if ("$$scope" in $$props) $$invalidate(6, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		clientId,
		state,
		redirectUri,
		responseType,
		scope,
		dispatch,
		urlFacebook,
		interval,
		popupWindow,
		convertQueryParams,
		close,
		poll,
		onLogin
	});

	$$self.$inject_state = $$props => {
		if ("clientId" in $$props) $$invalidate(1, clientId = $$props.clientId);
		if ("state" in $$props) $$invalidate(2, state = $$props.state);
		if ("redirectUri" in $$props) $$invalidate(3, redirectUri = $$props.redirectUri);
		if ("responseType" in $$props) $$invalidate(4, responseType = $$props.responseType);
		if ("scope" in $$props) $$invalidate(5, scope = $$props.scope);
		if ("interval" in $$props) interval = $$props.interval;
		if ("popupWindow" in $$props) popupWindow = $$props.popupWindow;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [onLogin, clientId, state, redirectUri, responseType, scope, $$scope, slots];
}

class FacebookLogin extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			clientId: 1,
			state: 2,
			redirectUri: 3,
			responseType: 4,
			scope: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FacebookLogin",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*clientId*/ ctx[1] === undefined && !("clientId" in props)) {
			console.warn("<FacebookLogin> was created without expected prop 'clientId'");
		}

		if (/*state*/ ctx[2] === undefined && !("state" in props)) {
			console.warn("<FacebookLogin> was created without expected prop 'state'");
		}

		if (/*redirectUri*/ ctx[3] === undefined && !("redirectUri" in props)) {
			console.warn("<FacebookLogin> was created without expected prop 'redirectUri'");
		}

		if (/*responseType*/ ctx[4] === undefined && !("responseType" in props)) {
			console.warn("<FacebookLogin> was created without expected prop 'responseType'");
		}

		if (/*scope*/ ctx[5] === undefined && !("scope" in props)) {
			console.warn("<FacebookLogin> was created without expected prop 'scope'");
		}
	}

	get clientId() {
		throw new Error_1("<FacebookLogin>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set clientId(value) {
		throw new Error_1("<FacebookLogin>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get state() {
		throw new Error_1("<FacebookLogin>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set state(value) {
		throw new Error_1("<FacebookLogin>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get redirectUri() {
		throw new Error_1("<FacebookLogin>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set redirectUri(value) {
		throw new Error_1("<FacebookLogin>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get responseType() {
		throw new Error_1("<FacebookLogin>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set responseType(value) {
		throw new Error_1("<FacebookLogin>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scope() {
		throw new Error_1("<FacebookLogin>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scope(value) {
		throw new Error_1("<FacebookLogin>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/index.svelte generated by Svelte v3.29.7 */

const { console: console_1 } = globals;
const file = "src/routes/index.svelte";

// (48:0) <FacebookLogin   clientId="400698430951063"   state="1"   redirectUri="http://localhost:3000/"   on:success={params => console.log(params)}   on:error={error => console.log(error)}   let:onLogin>
function create_default_slot(ctx) {
	let button;
	let t;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			t = text("Facebook Login");
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", {});
			var button_nodes = children(button);
			t = claim_text(button_nodes, "Facebook Login");
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(button, file, 54, 2, 836);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t);

			if (!mounted) {
				dispose = listen_dev(
					button,
					"click",
					function () {
						if (is_function(/*onLogin*/ ctx[2])) /*onLogin*/ ctx[2].apply(this, arguments);
					},
					false,
					false,
					false
				);

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(48:0) <FacebookLogin   clientId=\\\"400698430951063\\\"   state=\\\"1\\\"   redirectUri=\\\"http://localhost:3000/\\\"   on:success={params => console.log(params)}   on:error={error => console.log(error)}   let:onLogin>",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let t0;
	let h1;
	let t1;
	let t2;
	let facebooklogin;
	let t3;
	let figure;
	let img;
	let img_src_value;
	let t4;
	let figcaption;
	let t5;
	let t6;
	let p;
	let strong;
	let t7;
	let current;

	facebooklogin = new FacebookLogin({
			props: {
				clientId: "400698430951063",
				state: "1",
				redirectUri: "http://localhost:3000/",
				$$slots: {
					default: [
						create_default_slot,
						({ onLogin }) => ({ 2: onLogin }),
						({ onLogin }) => onLogin ? 4 : 0
					]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	facebooklogin.$on("success", /*success_handler*/ ctx[0]);
	facebooklogin.$on("error", /*error_handler*/ ctx[1]);

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Great success!");
			t2 = space();
			create_component(facebooklogin.$$.fragment);
			t3 = space();
			figure = element("figure");
			img = element("img");
			t4 = space();
			figcaption = element("figcaption");
			t5 = text("Have fun with Sapper!");
			t6 = space();
			p = element("p");
			strong = element("strong");
			t7 = text("Try editing this file (src/routes/index.svelte) to test live reloading.");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-oofwcx\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Great success!");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			claim_component(facebooklogin.$$.fragment, nodes);
			t3 = claim_space(nodes);
			figure = claim_element(nodes, "FIGURE", { class: true });
			var figure_nodes = children(figure);
			img = claim_element(figure_nodes, "IMG", { alt: true, src: true, class: true });
			t4 = claim_space(figure_nodes);
			figcaption = claim_element(figure_nodes, "FIGCAPTION", {});
			var figcaption_nodes = children(figcaption);
			t5 = claim_text(figcaption_nodes, "Have fun with Sapper!");
			figcaption_nodes.forEach(detach_dev);
			figure_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			strong = claim_element(p_nodes, "STRONG", {});
			var strong_nodes = children(strong);
			t7 = claim_text(strong_nodes, "Try editing this file (src/routes/index.svelte) to test live reloading.");
			strong_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Sapper project template";
			attr_dev(h1, "class", "svelte-1azyk8h");
			add_location(h1, file, 45, 0, 613);
			attr_dev(img, "alt", "Success Kid");
			if (img.src !== (img_src_value = successkid)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "svelte-1azyk8h");
			add_location(img, file, 58, 2, 916);
			add_location(figcaption, file, 59, 2, 961);
			attr_dev(figure, "class", "svelte-1azyk8h");
			add_location(figure, file, 57, 0, 905);
			add_location(strong, file, 63, 2, 1025);
			attr_dev(p, "class", "svelte-1azyk8h");
			add_location(p, file, 62, 0, 1019);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			mount_component(facebooklogin, target, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, figure, anchor);
			append_dev(figure, img);
			append_dev(figure, t4);
			append_dev(figure, figcaption);
			append_dev(figcaption, t5);
			insert_dev(target, t6, anchor);
			insert_dev(target, p, anchor);
			append_dev(p, strong);
			append_dev(strong, t7);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const facebooklogin_changes = {};

			if (dirty & /*$$scope, onLogin*/ 12) {
				facebooklogin_changes.$$scope = { dirty, ctx };
			}

			facebooklogin.$set(facebooklogin_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(facebooklogin.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(facebooklogin.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			destroy_component(facebooklogin, detaching);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(figure);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	const success_handler = params => console.log(params);
	const error_handler = error => console.log(error);
	$$self.$capture_state = () => ({ successkid, FacebookLogin });
	return [success_handler, error_handler];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment$1.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZDlkZjdhM2YuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ub2RlX21vZHVsZXMvaW1hZ2VzL3N1Y2Nlc3NraWQuanBnIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS1mYWNlYm9vay1sb2dpbi9zcmMvbGliL0ZhY2Vib29rTG9naW4uc3ZlbHRlIiwiLi4vLi4vLi4vc3JjL3JvdXRlcy9pbmRleC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIvY2xpZW50LzQ2NTg5OGM4MzBiYjlkMmMuanBnXCIiLCI8c2NyaXB0PlxuICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbiAgZXhwb3J0IGxldCBjbGllbnRJZDtcbiAgZXhwb3J0IGxldCBzdGF0ZTtcbiAgZXhwb3J0IGxldCByZWRpcmVjdFVyaTtcbiAgZXhwb3J0IGxldCByZXNwb25zZVR5cGU7XG4gIGV4cG9ydCBsZXQgc2NvcGU7XG5cbiAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcbiAgY29uc3QgdXJsRmFjZWJvb2sgPSBcImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS92NS4wL2RpYWxvZy9vYXV0aFwiO1xuICBsZXQgaW50ZXJ2YWwgPSAwO1xuICBsZXQgcG9wdXBXaW5kb3c7XG5cbiAgY29uc3QgY29udmVydFF1ZXJ5UGFyYW1zID0gdXJsID0+IHtcbiAgICBjb25zdCBxdWVyeSA9IHVybC5zdWJzdHIoMSk7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG5cbiAgICBxdWVyeS5zcGxpdChcIiZcIikuZm9yRWFjaChwYXJhbSA9PiB7XG4gICAgICBjb25zdCBpdGVtID0gcGFyYW0uc3BsaXQoXCI9XCIpO1xuICAgICAgcmVzdWx0W2l0ZW1bMF1dID0gZGVjb2RlVVJJQ29tcG9uZW50KGl0ZW1bMV0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBjb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBpZiAoaW50ZXJ2YWwpIHtcbiAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgIGludGVydmFsID0gbnVsbDtcbiAgICB9XG5cbiAgICBwb3B1cFdpbmRvdy5jbG9zZSgpO1xuICB9O1xuXG4gIC8vIFN2ZWx0ZUdpdGh1YkxvZ2luIGJhc2VkXG4gIGNvbnN0IHBvbGwgPSAoKSA9PiB7XG4gICAgaW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFwb3B1cFdpbmRvdyB8fCBwb3B1cFdpbmRvdy5jbG9zZWQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgICBkaXNwYXRjaChcImVycm9yXCIsIG5ldyBFcnJvcihcIlRoZSBwb3B1cCB3YXMgY2xvc2VkXCIpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgcG9wdXBXaW5kb3cubG9jYXRpb24uaHJlZiA9PT0gdXJsRmFjZWJvb2sgfHxcbiAgICAgICAgICBwb3B1cFdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSA9PT0gXCJibGFua1wiXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGRpc3BhdGNoKFwic3VjY2Vzc1wiLCBjb252ZXJ0UXVlcnlQYXJhbXMocG9wdXBXaW5kb3cubG9jYXRpb24uc2VhcmNoKSk7XG4gICAgICAgIGNsb3NlKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBlcnJvclxuICAgICAgfVxuICAgIH0sIDUwMCk7XG4gIH07XG5cbiAgY29uc3Qgb25Mb2dpbiA9ICgpID0+IHtcbiAgICBsZXQgdXJsUGFyYW1zID0gYGNsaWVudF9pZD0ke2NsaWVudElkfSZzdGF0ZT0ke3N0YXRlfSZyZWRpcmVjdF91cmk9JHtyZWRpcmVjdFVyaX1gO1xuXG4gICAgaWYgKHJlc3BvbnNlVHlwZSkge1xuICAgICAgdXJsUGFyYW1zICs9IGByZXNwb25zZV90eXBlPSR7cmVzcG9uc2VUeXBlfWA7XG4gICAgfVxuXG4gICAgaWYgKHNjb3BlKSB7XG4gICAgICB1cmxQYXJhbXMgKz0gYHNjb3BlPSR7c2NvcGV9YDtcbiAgICB9XG5cbiAgICBwb3B1cFdpbmRvdyA9IHdpbmRvdy5vcGVuKFxuICAgICAgYCR7dXJsRmFjZWJvb2t9PyR7dXJsUGFyYW1zfWAsXG4gICAgICBcImZhY2Vib29rLW9hdXRoXCIsXG4gICAgICBcIlwiXG4gICAgKTtcblxuICAgIGRpc3BhdGNoKFwicmVxdWVzdFwiKTtcblxuICAgIHBvbGwoKTtcbiAgfTtcbjwvc2NyaXB0PlxuXG48c2xvdCB7b25Mb2dpbn0gLz5cbiIsIjxzY3JpcHQ+XG4gIGltcG9ydCBzdWNjZXNza2lkIGZyb20gXCJpbWFnZXMvc3VjY2Vzc2tpZC5qcGdcIjtcbiAgaW1wb3J0IEZhY2Vib29rTG9naW4gZnJvbSBcInN2ZWx0ZS1mYWNlYm9vay1sb2dpblwiO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgaDEsXG4gIGZpZ3VyZSxcbiAgcCB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMCBhdXRvO1xuICB9XG5cbiAgaDEge1xuICAgIGZvbnQtc2l6ZTogMi44ZW07XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICBmb250LXdlaWdodDogNzAwO1xuICAgIG1hcmdpbjogMCAwIDAuNWVtIDA7XG4gIH1cblxuICBmaWd1cmUge1xuICAgIG1hcmdpbjogMCAwIDFlbSAwO1xuICB9XG5cbiAgaW1nIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXgtd2lkdGg6IDQwMHB4O1xuICAgIG1hcmdpbjogMCAwIDFlbSAwO1xuICB9XG5cbiAgcCB7XG4gICAgbWFyZ2luOiAxZW0gYXV0bztcbiAgfVxuXG4gIEBtZWRpYSAobWluLXdpZHRoOiA0ODBweCkge1xuICAgIGgxIHtcbiAgICAgIGZvbnQtc2l6ZTogNGVtO1xuICAgIH1cbiAgfVxuPC9zdHlsZT5cblxuPHN2ZWx0ZTpoZWFkPlxuICA8dGl0bGU+U2FwcGVyIHByb2plY3QgdGVtcGxhdGU8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPGgxPkdyZWF0IHN1Y2Nlc3MhPC9oMT5cblxuPEZhY2Vib29rTG9naW5cbiAgY2xpZW50SWQ9XCI0MDA2OTg0MzA5NTEwNjNcIlxuICBzdGF0ZT1cIjFcIlxuICByZWRpcmVjdFVyaT1cImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9cIlxuICBvbjpzdWNjZXNzPXtwYXJhbXMgPT4gY29uc29sZS5sb2cocGFyYW1zKX1cbiAgb246ZXJyb3I9e2Vycm9yID0+IGNvbnNvbGUubG9nKGVycm9yKX1cbiAgbGV0Om9uTG9naW4+XG4gIDxidXR0b24gb246Y2xpY2s9e29uTG9naW59PkZhY2Vib29rIExvZ2luPC9idXR0b24+XG48L0ZhY2Vib29rTG9naW4+XG5cbjxmaWd1cmU+XG4gIDxpbWcgYWx0PVwiU3VjY2VzcyBLaWRcIiBzcmM9e3N1Y2Nlc3NraWR9IC8+XG4gIDxmaWdjYXB0aW9uPkhhdmUgZnVuIHdpdGggU2FwcGVyITwvZmlnY2FwdGlvbj5cbjwvZmlndXJlPlxuXG48cD5cbiAgPHN0cm9uZz5cbiAgICBUcnkgZWRpdGluZyB0aGlzIGZpbGUgKHNyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlKSB0byB0ZXN0IGxpdmUgcmVsb2FkaW5nLlxuICA8L3N0cm9uZz5cbjwvcD5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlCQUFlOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQ1VQLFdBQVcsR0FBRyw0Q0FBNEM7Ozs7O09BUHJELFFBQVE7T0FDUixLQUFLO09BQ0wsV0FBVztPQUNYLFlBQVk7T0FDWixLQUFLO09BRVYsUUFBUSxHQUFHLHFCQUFxQjtLQUVsQyxRQUFRLEdBQUcsQ0FBQztLQUNaLFdBQVc7O09BRVQsa0JBQWtCLEdBQUcsR0FBRztRQUN0QixLQUFLLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BCLE1BQU07O0VBRVosS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEtBQUs7U0FDdEIsSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRztHQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7O1NBR3RDLE1BQU07OztPQUdULEtBQUs7TUFDTCxRQUFRO0dBQ1YsTUFBTSxDQUFDLGFBQWEsQ0FBQyxRQUFRO0dBQzdCLFFBQVEsR0FBRyxJQUFJOzs7RUFHakIsV0FBVyxDQUFDLEtBQUs7Ozs7T0FJYixJQUFJO0VBQ1IsUUFBUSxHQUFHLE1BQU0sQ0FBQyxXQUFXOzs7VUFFcEIsV0FBVyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEtBQUssS0FBSztNQUM5QyxLQUFLO01BQ0wsUUFBUSxDQUFDLE9BQU8sTUFBTSxLQUFLLENBQUMsc0JBQXNCOzs7O1NBS2xELFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxLQUFLLFdBQVcsSUFDekMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEtBQUssT0FBTzs7OztLQUszQyxRQUFRLENBQUMsU0FBUyxFQUFFLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsTUFBTTtLQUNsRSxLQUFLO1lBQ0UsS0FBSzs7OztHQUdiLEdBQUc7Ozs7T0FHRixPQUFPO01BQ1AsU0FBUyxnQkFBZ0IsUUFBUSxVQUFVLEtBQUssaUJBQWlCLFdBQVc7O01BRTVFLFlBQVk7R0FDZCxTQUFTLHFCQUFxQixZQUFZOzs7TUFHeEMsS0FBSztHQUNQLFNBQVMsYUFBYSxLQUFLOzs7RUFHN0IsV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJLElBQ3BCLFdBQVcsSUFBSSxTQUFTLElBQzNCLGdCQUFnQixFQUNoQixFQUFFO0VBR0osUUFBUSxDQUFDLFNBQVM7RUFFbEIsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0NDekJZLEdBQU8sa0JBQVAsR0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQ0FJRyxVQUFVOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eUJBUDFCLE1BQU0sSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU07dUJBQzlCLEtBQUssSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
